module TFT_CTRL(
	clk9m,
	rst_n,
	data_in,
	
	vcount,
	hcount,
	TFT_RGB,
	TFT_VS,
	TFT_HS,
	TFT_CLK,
	TFT_DE,
	TFT_PWM

);

	input clk9m;
	input rst_n;
	input data_in;
	
	output vcount;
	output hcount;
	output TFT_RGB;
	output TFT_VS;
	output TFT_HS;
	output TFT_CLK
	output TFT_DE;
	output TFT_PWM;
	
	parameter THT_HS_end = 10'd40,
				 hdat_begin = 10'd42,
				 hdat_end = 10'd522,
				 hpixel_end = 10'd524,
				 TFT_VS_end = 10'd9,
				 vdat_begin = 10'd11,
				 vdat_end = 10'd283,
				 vline_end - 10'd285;
				 
	reg [9:0] hcount_r;
	
	
	always@(posedge clk or negedge rst_n)
		if(!rst_n)
			hcount_r <= 0 ;
		else if(hcount_r == hpixel_end)
			hcount_r <= 0;
		else	
			hcount_r <= hcount_r + 1;
			
	reg [9:0] vcount_r;
	
	always@(posedge clk or negedge rst_n)
		if(!rst_n)
			vcount_r <= 0;
		else if(hcount_r == hpixel_end)
			if(vcount_r == vline_end)
				vcount_r <=0;
			else
				vcount_r <= vcount_r + 1;
		else
			vcount_r <= vcount_r;
			
	assign TFT_HS = (hcount_r > TFT_HS_end)?1'b1:1'b0;
	assign TFT_VS = (vcount_r > TFT_VS_end)?1'b1:1'b0;
	
	assign dat_act=((hcount_r >= hdat_begin)&&(hcount_r < hdat_end))&&((vcount_r >= vdat_begin)&&(vcount_r < vdat_end));
	assign TFT_RGB = (dat_act)?data_in:16'h0000;
	
	


endmodule